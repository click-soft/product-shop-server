scalar Any
scalar Date

type Query {
  getPaymentWithItems: [PaymentType!]
  getOrderCompleted(orderId: String!): PaymentType!
}

type Mutation {
  checkout(dto: CheckoutInput!): CheckoutResult
  cancelOrder(
    paymentId: Int!
    paymentKey: String!
    cancelReason: String!
  ): CheckoutResult
  refundOrder(dto: CancelOrderInput!): CheckoutResult
}

input CancelOrderInput {
  paymentId: Int!
  cancelReason: String!
  bank: String
  accountNumber: String
  holderName: String
}

type PaymentType {
  id: Int!
  ykiho: String!
  orderId: String!
  paymentKey: String!
  method: String!
  amount: Float!
  quantity: Int!
  requestedAt: Date!
  approvedAt: Date
  sendType: String!
  cancel: Boolean!
  paymentItems: [PaymentItemType!]!
  virtual: VirtualAccountType
}

type VirtualAccountType {
  bankCode: String!
  customerName: String!
  dueDate: Date!
  accountNumber: String!
}

type PaymentItemType {
  id: Int!
  paymentId: Int!
  code: String!
  name: String!
  fit: Boolean!
  quantity: Int!
  amount: Float!
}

input CheckoutInput {
  paymentType: String!
  orderId: String!
  orderName: String!
  paymentKey: String!
  amount: Int!
  quantity: Int!
  items: [CheckoutCartItemInput!]!
}

input CheckoutCartItemInput {
  code: String!
  name: String!
  fit: Boolean!
  quantity: Int!
  amount: Float!
}

type CheckoutResult {
  success: Boolean!
  errorCode: String
  errorMessage: String
  method: String
  requestedAt: Date
  approvedAt: Date
}
