# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DeleteResult {
  raw: Any
  affected: Int!
}

type Product {
  auto: Int!
  clCode: String!
  jisa: String!
  csCode: String!
  ctTel: String!
  count: Float!
  receive: String!
  receiveYmd: String!
  sell: String!
  sellYmd: String!
  orderCheck: String!
  seller: String!
  check: String!
  check2: String!
  rgb: String!
  bigo: String!
  createDt: DateTime!
  bigo2: String
  etc1: String
  etc2: String
  etc3: String
  etc4: String
  etc5: String
  web: Boolean!
  webPaymentItemId: Float!
  webBNPL: Boolean!
  cs: Cs
  productListSub: ProductListSub
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Cs {
  gubun: String
  code: String
  myung: String
  daepyo: String
  tel: String
  fax: String
  post: String
  dup: Float
  juso: String
  bunji: String
  jisa: String
  emCode: String
  damdang: String
  damdanghp: String
  jongbl: String
  upte: String
  saupnum: String
  sauppost: String
  saupdup: Float
  saupjuso: String
  saupbunji: String
  email: String
  ediid: String
  edipassword: String
  local: String
  nonchart: String
  fymd: String
  lymd: String
  bigo: String
  user: String
  etc1: String
  etc2: String
  etc3: String
  Chonguser: String
  pro: String
  yanghan: String
  chunggu: String
  cherbang: String
  youngsu: String
  pacs: String
  barcode: String
  yakguk: String
  update: String
  askumak: Float
  etc4: String
  etc5: String
  etc6: String
  etc7: String
  cms: String
  daegidisp: String
  gumjinlink: String
  capture: String
  sutak: String
  sutaklink: String
  gumsalinkyn: String
  gumsalink: String
  scaner: String
  card: String
  cardlink: String
  eleccherban: String
  yakgukprint: String
  gumsabarcod: String
  bdbarcode: String
  updatepath: String
  server: String
  sanjae: String
  paljji: String
  jungji: String
  servermodel: String
  servername: String
  serverSN: String
  serverMT: String
  serverHDD: String
  serverMemor: String
  serverLocat: String
  serversetup: String
  window: String
  windowmemo: String
  virusname: String
  virussetup: String
  virusend: String
  upsname: String
  upssetup: String
  upsend: String
  rollprint: String
  inuser: String
  upuser: String
  indate: String
  update2: String
  etc8: String
  etc9: String
  etc10: String
  etc11: String
  etc12: String
  etc13: String
  etc14: String
  etc15: String
  bogubun: String
  aschk: String
  etc16: String
  etc17: String
  etc18: String
  etc19: String
  etc20: String
  etc21: String
  etc22: String
  etc23: String
  etc24: String
  etc25: String
  etc26: String
  etc27: String
  etc28: String
  etc29: String
  etc30: String
  etc31: String
  etc32: String
  etc33: String
  etc34: String
  etc35: String
  server_cust: String
  server_orde: String
  server_mici: String
  server_admi: String
  server_svrp: String
  server_svrb: String
  oauthpwd: String
  medi_use: String
  medi_pc: String
  medi_autoju: String
  medi_grname: String
  em: Em!
}

type ProductList {
  jisa: String!
  smCode: String!
  smYmd: String!
  addUser: String!
  createDt: DateTime!
  bigo: String!
  web: Boolean!
  bunryu: String!
  step: Float!
  productListSub: ProductListSub!
}

type ProductListSub {
  auto: Float
  jisa: String
  smCode: String
  smMyung: String
  smYmd: String
  danga: Float
  danwi: String
  etc1: String
  etc2: String
  etc3: String
  etc4: String
  etc5: String
  productList: ProductList
}

type ProductsWithPage {
  page: Int!
  isLast: Boolean!
  products: [Product!]!
}

type PaymentVirtual {
  id: Float!
  paymentId: Float!
  bankCode: String!
  customerName: String!
  dueDate: DateTime!
  accountNumber: String!
  payment: Payment!
}

type Payment {
  id: Float!
  ykiho: String!
  orderId: String!
  paymentKey: String!
  method: String!
  amount: Float!
  quantity: Float!
  requestedAt: DateTime
  approvedAt: DateTime
  sendType: String!
  cancel: Boolean!
  test: Float
  paymentItems: [PaymentItem!]
  virtual: PaymentVirtual
  cs: Cs!
}

type PaymentItem {
  id: Float!
  paymentId: Float!
  code: String!
  name: String!
  fit: Boolean!
  quantity: Float!
  amount: Float!
  payment: Payment!
  product: Product
}

type ProductsByBunryu {
  bunryu: String!
  products: [ProductListSub!]!
}

type Em {
  code: String
  name: String
}

type Cart {
  id: Int!
  ykiho: String!
  cartItems: [CartItem!]!
}

type CartItem {
  id: Int!
  cartId: Int!
  code: String!
  quantity: Int!
  fit: Boolean!
  createdDate: DateTime!
  updatedDate: DateTime!
  cart: Cart!
  product: ProductListSub!
}

type Account {
  id: Float!
  userId: String!
  password: String!
  email: String!
  ykiho: String
  saupkiho: String
  token: String
  expiryDate: DateTime
  admin: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type CsType {
  jisa: String!
  code: String!
  myung: String!
  daepyo: String!
  saupnum: String!
  youngsu: String!
  cherbang: String!
}

type User {
  userId: String!
  jisa: String!
  ykiho: String!
  saupkiho: String!
  name: String!
  ceoName: String!
  fitCherbang: Boolean!
  fitYoungsu: Boolean!
  admin: Boolean
  email: String
  useBNPL: Boolean
  exp: Int
}

type MessageResult {
  message: String!
}

type TokenResult {
  accessToken: String
  usr: String
  admin: Boolean
}

type CheckoutResult {
  success: Boolean!
  errorCode: String
  errorMessage: String
  method: String
  requestedAt: DateTime
  approvedAt: DateTime
}

type PaymentsWithPage {
  page: Int!
  isLast: Boolean!
  payments: [Payment!]!
}

type UpdateResult {
  raw: Any
  affected: Int!
  generatedMaps: Any!
}

type Test {
  """Example field (placeholder)"""
  exampleField: String!
}

"""Any scalar type"""
scalar Any

type Query {
  getCs(ykiho: String, saupkiho: String): CsType!
  getUser: User!
  cartItemsCount: Int!
  getCart: Cart!
  getCartWithProduct: Cart
  getPaymentWithItems(page: Int!): PaymentsWithPage!
  getAdminPayments(jisa: String!, startDate: DateTime!, endDate: DateTime!, emCode: String, customerName: String, orderId: String, page: Int!): PaymentsWithPage!
  getOrderCompleted(orderId: String!): Payment!
  getAccount(userId: String!): Account!
  verifyAccount(userId: String!, password: String!): Account!
  validChangePassword(userId: String!, token: String!): Boolean!
  getAdminProducts(startYmd: String!, endYmd: String!, emCode: String, csMyung: String, page: Int!): ProductsWithPage!
  getProductsBunryuList(jisa: String!, bunryu: String): [ProductsByBunryu!]!
  getPaymentItemById(id: Int!): PaymentItem!
  getManagers: [Em!]!
  test(id: Int!): Test!
}

type Mutation {
  login(userId: String!, password: String!): TokenResult!
  logout: MessageResult!
  refresh(key: String!): TokenResult!
  addToCart(id: Int, cartId: Int, code: String!, quantity: Int!, fit: Boolean!, createdDate: DateTime, updatedDate: DateTime): MessageResult!
  checkout(dto: CheckoutInput!): CheckoutResult!
  cancelOrder(paymentId: Int!, paymentKey: String!, cancelReason: String!): CheckoutResult!
  refundOrder(paymentId: Int!, cancelReason: String!, bank: String!, accountNumber: String!, holderName: String!): CheckoutResult!
  saveAccount(userId: String!, password: String!, email: String!): Account!
  sendChangePasswordEmail(userId: String!): String!
  changePassword(userId: String!, password: String!): UpdateResult!
  changeEmail(newEmail: String!): UpdateResult!
  deleteProducts(ids: [Int!]!): DeleteResult!
  updateProduct(auto: Int!, orderCheck: String, seller: String): Product!
  getPaymentItemIdsByPaymentId(paymentId: Int!): [Int!]
  updateCartItemQuantity(id: Int!, quantity: Int!): UpdateResult!
  deleteCartItems(ids: [Int!]!): DeleteResult!
  createTest(createTestInput: CreateTestInput!): Test!
  updateTest(updateTestInput: UpdateTestInput!): Test!
  removeTest(id: Int!): Test!
}

input CheckoutInput {
  paymentType: String!
  orderId: String!
  orderName: String!
  paymentKey: String!
  amount: Int!
  quantity: Int!
  items: [CheckoutCartItemInput!]!
}

input CheckoutCartItemInput {
  code: String!
  name: String!
  fit: Boolean!
  quantity: Int!
  amount: Int!
}

input CreateTestInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateTestInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}